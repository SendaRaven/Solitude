{"version":3,"sources":["Components/PetitionListView.jsx","Components/CreatePetitionView.jsx","Components/Home.jsx","Components/CreateSignature.jsx","Components/PetitionView.jsx","App.js","storage.js","serviceWorker.js","index.js"],"names":["PetitionListView","className","ListGroup","this","props","petitions","map","petition","index","ListGroupItem","key","to","pathname","id","state","title","Component","CreatePetitionView","handleTitleChange","event","setState","target","value","console","log","handleDescriptionChange","description","handleSubmitButton","uuid","signatures","newPetition","history","push","alert","Form","FormGroup","Label","for","Input","type","placeholder","onChange","name","Button","color","onClick","Home","handleRedirect","redirect","renderRedirect","Jumbotron","CreateSignature","handleFirstNameChange","firstName","handleLastNameChange","lastName","handleEmailChange","email","handleSignatureButton","signature","newSignature","petitionId","toggle","PetitionView","modal","location","Card","CardHeader","CardBody","CardText","CardFooter","Table","scope","Modal","isOpen","ModalHeader","ModalBody","App","canUseLocalStorage","Error","localStorage","setItem","defaultValue","getItem","removeItem","e","petitionIndex","findIndex","JSON","parse","stringify","Navbar","light","expand","NavbarBrand","Nav","navbar","NavItem","NavLink","exact","path","component","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdbeab4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from \"reactstrap\"\nimport { Link } from 'react-router-dom'\n// import PetitionView from './PetitionView';\n\n\n\nclass PetitionListView extends Component {\n    render() {\n        return (\n            <div className=\"body\">\n                <h1>Petitions</h1>\n                <ListGroup >\n                    {this.props.petitions.map((petition, index) =>\n\n                        <ListGroupItem key={index} petition={petition}><Link to={{ pathname: `/${petition.id}`, state: { petition: petition } }}>{petition.title}</Link></ListGroupItem>\n\n                    )}\n                </ListGroup>\n                <hr />\n            </div >\n        )\n    }\n}\n\nexport default PetitionListView;","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport uuid from 'uuid/v4';\n\nexport default class CreatePetitionView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            title: \"\",\n            description: \"\"\n        };\n    }\n    handleTitleChange = event => {\n        this.setState({\n            title: event.target.value,\n        });\n        console.log(this.state);\n    };\n    handleDescriptionChange = event => {\n        this.setState({\n            description: event.target.value,\n        });\n        console.log(this.state);\n    };\n    handleSubmitButton = () => {\n        if (this.state.title && this.state.description !== \"\") {       \n        let petitions = {\n            id: uuid(),\n            title: this.state.title,\n            description: this.state.description,\n            signatures: []\n        };\n        console.log(petitions);\n\n        this.props.newPetition(petitions);\n        this.props.history.push(\"/viewPetitions\") \n    } else {\n        alert(\"Please enter title and description of the petition!\")\n    }\n    };\n    render() {\n        return (\n            <div className=\"container\">\n                <h1>\n                    Create a Petition\n      </h1>\n                <Form>\n                    <FormGroup>\n                        <Label for=\"title\">Title</Label>\n                        <Input type=\"text\" id=\"title\" placeholder=\"Write your title\" value={this.state.title} onChange={this.handleTitleChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"description\">Description</Label>\n                        <Input type=\"textarea\" name=\"text\" id=\"description\" onChange={this.handleDescriptionChange} placeholder=\"Write a description for your petition\" value={this.state.description} />\n\n                    </FormGroup>\n                    <Button color=\"secondary\" onClick={this.handleSubmitButton}>Create</Button>\n                </Form>\n                <hr />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport {Jumbotron, Button } from 'reactstrap';\nimport { Redirect } from 'react-router-dom'\n\n\nexport default class Home extends Component {\n    constructor() {\n        super()\n        this.state = {\n            redirect: false,\n        }\n    }\n\n    handleRedirect = () => {\n        this.setState({ redirect: true })\n    }\n\n    renderRedirect = () => {\n        if (this.state.redirect) {\n            return <Redirect to='/createPetition' />\n        }\n    }\n\n    render() {\n        return (<Jumbotron className=\"text-center\">\n            {this.renderRedirect()}\n            <h1>Solitude – Online Petition Platform </h1>\n            <Button color=\"primary\" onClick={this.handleRedirect}>Create Petition</Button>\n        </Jumbotron>);\n    }\n}","import React, { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\n\nclass CreateSignature extends Component {\n    constructor() {\n        super()\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n        }\n    }\n\n    handleFirstNameChange = event => {\n        this.setState({\n            firstName: event.target.value\n        })\n        console.log(this.state.firstName);\n    }\n\n    handleLastNameChange = event => {\n        this.setState({\n            lastName: event.target.value\n        })\n        console.log(this.state.lastName);\n    }\n\n    handleEmailChange = event => {\n        this.setState({\n            email: event.target.value\n        })\n        console.log(this.state.email);\n    }\n\n    handleSignatureButton = () => {\n        if (this.state.firstName && this.state.lastName && this.state.email !== \"\") {\n\n\n            let signature = {\n                firstName: this.state.firstName,\n                lastName: this.state.lastName,\n                email: this.state.email,\n            }\n            console.log(signature);\n            this.props.newSignature(this.props.petitionId, signature)\n\n            this.setState({\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n            })\n            this.props.toggle()\n        } else {\n            alert(\"Please fill all input fields!\")\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Sign this Petition</h3>\n                <Form>\n                    <FormGroup>\n                        <Label for=\"firstname\">First Name</Label>\n                        <Input type=\"text\" id=\"firstname\" placeholder=\"Your first name\" value={this.state.firstName} onChange={this.handleFirstNameChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"lastname\">Last Name</Label>\n                        <Input type=\"text\" id=\"lastname\" placeholder=\"Your last name\" value={this.state.lastName} onChange={this.handleLastNameChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input type=\"email\" id=\"email\" placeholder=\"Your email\" value={this.state.email} onChange={this.handleEmailChange} />\n                    </FormGroup>\n                    <Button color=\"primary\" onClick={this.handleSignatureButton}>Sign</Button>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default CreateSignature;","import React, { Component } from 'react';\nimport CreateSignature from './CreateSignature'\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { Card, CardHeader, CardBody, CardFooter, CardText, Table } from 'reactstrap';\nexport default class PetitionView extends Component {\n    state = {\n        modal: false\n    };\n    toggle = () => this.setState({ modal: !this.state.modal });\n    \n    render() {\n        const petition = this.props.location.state.petition;\n\n        return (\n\n            <Card className=\"body\">\n                <CardHeader>{petition.title}</CardHeader>\n                <CardBody>\n                    <CardText>{petition.description}</CardText>\n                    <Button color=\"danger\" onClick={this.toggle}>Sign Petition</Button>\n                </CardBody>\n                <CardFooter>\n                    <h6>Signed by:</h6>\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>eMail</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {petition.signatures.map((signature, index) =>\n                                <tr key={index}>\n                                    <th scope=\"row\">{index + 1}</th>\n                                    <td>{signature.firstName}</td>\n                                    <td>{signature.lastName}</td>\n                                    <td>{signature.email}</td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </Table>\n                </CardFooter>\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>{petition.title}</ModalHeader>\n                    <ModalBody>\n                        < CreateSignature newSignature={this.props.newSignature} toggle={this.toggle} petitionId={petition.id} />\n                    </ModalBody>\n                </Modal>\n            </Card>\n        )\n    }\n}\n","import React, {\n  Component\n} from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom' //HashRouter needs to be replaced with BrowserRouter if node backend exists\nimport {\n  Navbar,\n  NavbarBrand,\n  NavItem,\n  Nav,\n  NavLink\n} from 'reactstrap';\n\nimport PetitionListView from './Components/PetitionListView'\nimport CreatePetitionView from './Components/CreatePetitionView';\nimport Home from './Components/Home';\nimport PetitionView from './Components/PetitionView'\n\nimport \"./storage\"\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    let petitions = JSON.parse(localStorage.getItem('petitions')) || [];\n    this.state = {\n      petitions: petitions,\n    }\n    console.log(petitions);\n  }\n\n  newPetition = petition => {\n    let petitions = this.state.petitions;\n    petitions.push(petition);\n    this.setState({\n      petitions: petitions,\n    })\n    console.log(this.state);\n  }\n\n  newSignature = (petitionId, signature) => {\n    let petitions = this.state.petitions;\n    let petitionIndex = petitions.findIndex(petition => petition.id === petitionId);\n    console.log(\"Index\", petitionIndex);\n    let signatures = petitions[petitionIndex].signatures || [];\n\n    signatures.push(signature);\n    petitions[petitionIndex].signatures = signatures;\n    this.setState({\n      petitions: petitions\n    });\n    console.log(this.state);\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('petitions', JSON.stringify(this.state.petitions))\n  }\n\n  render() {\n    return (<Router >\n      <Navbar color=\"light\" light expand=\"md\" >\n        <NavbarBrand > Solitude </NavbarBrand> <Nav className=\"ml-auto\"\n          navbar >\n          <NavItem >\n            <NavLink > < Link to=\"/\" > Home </Link></NavLink >\n          </NavItem> <NavItem >\n            <NavLink > < Link to=\"/createPetition\" > Create a Petition </Link></NavLink >\n          </NavItem> <NavItem >\n            <        NavLink > < Link to=\"/viewPetitions\" > View all Petitions </Link></NavLink >\n          </NavItem> {\n            /* <CreatePetitionView newPetition={this.newPetition} /> */\n          } {\n            /* <PetitionView petitions={this.state.petitions} /> */\n          } {\n            /* <CreateSignature newSignature={this.newSignature} /> */\n          } </Nav> </    Navbar > <      Switch >\n        <                            Route exact path=\"/\"\n          component={\n            Home\n          }\n        /> <                            Route path=\"/createPetition\"\n          render={\n            (props) => < CreatePetitionView {\n              ...props\n            }\n              newPetition={\n                this.newPetition\n              }\n            />} />\n        <                            Route path=\"/viewPetitions\"\n          render={\n            (props) => < PetitionListView {\n              ...props\n            }\n              petitions={\n                this.state.petitions\n              }\n            />} />\n\n        <                            Route path=\"/:id\"\n          render={\n            (props) => < PetitionView {\n              ...props\n            }\n              newSignature={\n                this.newSignature\n              }\n            />} />\n\n      </Switch> </Router >\n    )\n  }\n}\n\nexport default App;","class Storage {\n    constructor() {\n      if (!this.canUseLocalStorage()) {\n        throw Error(\"The local storage is disabled or full!\");\n      }\n    }\n  \n    set(key, value) {\n      localStorage.setItem(key, value);\n    }\n  \n    get(key, defaultValue = null) {\n      const value = localStorage.getItem(key);\n  \n      if (value !== null) {\n        return value;\n      }\n  \n      return defaultValue;\n    }\n  \n    canUseLocalStorage() {\n      let test = \"test\";\n  \n      try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n      } catch (e) {\n        return false;\n      }\n  \n      return true;\n    }\n  }\n  \n  export default new Storage();","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}